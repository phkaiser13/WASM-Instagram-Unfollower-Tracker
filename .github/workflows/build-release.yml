# /* Copyright (C) 2025 Pedro Henrique / phkaiser13
# * File: build-release.yml
# * Description: This GitHub Actions workflow automates the build, test, and
# * release process for the Rust WASM module. It triggers on pushes/PRs to the
# * main branch for continuous integration, and on version tags (e.g., v1.0.0)
# * to create a GitHub Release with the compiled WASM artifacts. It uses
# * best practices like caching, linting (clippy), and job separation.
# * SPDX-License-Identifier: Apache-2.0 */

name: Build and Release WASM

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    name: Build & Test WASM Module
    runs-on: ubuntu-latest
    
    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. (DEBUG STEP) List files to verify the directory structure
      # This is crucial for debugging path-related errors.
      - name: List files in the repository
        run: ls -R

      # 3. Install the Rust toolchain with the correct target for browser-based WASM.
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown

      # 4. Install wasm-pack
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      # 5. Cache Rust dependencies for faster builds
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            rust_logic/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust_logic/Cargo.lock') }}

      # 6. Run Linter (Clippy)
      # The working-directory path must exactly match the directory name in the repo.
      - name: Run Linter (Clippy)
        run: cargo clippy -- -D warnings
        working-directory: rust_logic

      # 7. Run tests
      - name: Run tests
        run: cargo test --verbose
        working-directory: rust_logic

      # 8. Build the WASM package for production
      - name: Build WASM for production
        run: wasm-pack build --target web --out-dir ../extension/wasm
        working-directory: rust_logic

      # 9. Upload the compiled WASM artifacts for the release job
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: |
            extension/wasm/unfollower_logic.js
            extension/wasm/unfollower_logic_bg.wasm
            extension/wasm/package.json
            extension/wasm/.gitignore

  create_release:
    name: Create GitHub Release
    needs: build_and_test
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1. Download the artifacts built in the previous job
      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build
          path: wasm-release-assets

      # 2. Create the release and upload the assets
      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "wasm-release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
